use serde::{Deserialize, Serialize};
use serde_json::Value;

#[derive(Serialize, Deserialize, Debug)]
pub struct Vulnerability {
    id: u32,
    category: String,
    name: String,
    description: String,
    r#type: String,
    cve: String,
    severity: String,
    location: Location,
    weaknesses: Vec<Weakness>
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Location {
    file: String, 
    start_line: u64,
    end_line: u64
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Weakness {
    id: u32,
    r#type: String,
    name: String,
    value: String,
    url: String
}

pub fn create_vulnerability(id: u32, vulnerability_json: &Value, location: Location, weaknesses: Vec<Weakness>) -> Vulnerability {
    Vulnerability {
        id, 
        category: vulnerability_json["category"].as_str().unwrap_or_default().to_string(),
        name: vulnerability_json["name"].as_str().unwrap_or_default().to_string(),
        description: vulnerability_json["description"].as_str().unwrap_or_default().to_string(),
        r#type: vulnerability_json["type"].as_str().unwrap_or_default().to_string(),
        cve: vulnerability_json["cve"].as_str().unwrap_or_default().to_string(),
        severity: vulnerability_json["severity"].as_str().unwrap_or_default().to_string(),
        location,
        weaknesses,
    }
}

pub fn create_location(vulnerability_json: &Value) -> Location {
    let location_json = &vulnerability_json["tracking"]["items"];
    Location {
        file: location_json["file"].as_str().unwrap_or_default().to_string(),
        start_line: location_json["line_start"].as_u64().unwrap_or_default(),
        end_line: location_json["line_end"].as_u64().unwrap_or_default()
    }
}

pub fn create_weaknesses(vulnerability_json: &Value) -> Vec<Weakness> {
    let mut weaknesses: Vec<Weakness> = Vec::new();

    if let Some(weakness_list) = vulnerability_json["identifiers"].as_array() {
        let mut id = 0;
        for weakn in weakness_list {
            let weakness = create_weakness(id, &weakn);
            weaknesses.push(weakness);
            id += 1;
        }
    }
    weaknesses
}

fn create_weakness(id: u32, weakness_json: &Value) -> Weakness {
    Weakness {
        id,
        r#type: weakness_json["type"].as_str().unwrap_or_default().to_string(),
        name: weakness_json["name"].as_str().unwrap_or_default().to_string(),
        value: weakness_json["weakn"].as_str().unwrap_or_default().to_string(),
        url: weakness_json["url"].as_str().unwrap_or_default().to_string()
    }
}