use serde::{Deserialize, Serialize};
use serde_json::Value;

#[derive(Serialize, Deserialize, Debug)]
pub struct Vulnerability {
    pub id: u32,
    pub category: String,
    pub name: String,
    pub description: String,
    pub cve: String,
    pub severity: String,
    pub location: Location,
    pub weaknesses: Vec<Weakness>,
}

impl Vulnerability {
    pub fn new(
        id: u32,
        vulnerability_json: &Value,
        location: Location,
        weaknesses: Vec<Weakness>,
    ) -> Vulnerability {
        Vulnerability {
            id,
            category: vulnerability_json["category"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            name: vulnerability_json["name"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            description: vulnerability_json["description"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            cve: vulnerability_json["cve"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            severity: vulnerability_json["severity"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            location,
            weaknesses,
        }
    }

    pub fn create_weaknesses(vulnerability_json: &Value) -> Vec<Weakness> {
        let mut weaknesses: Vec<Weakness> = Vec::new();

        if let Some(weakness_list) = vulnerability_json["identifiers"].as_array() {
            let mut id = 0;
            for weakn in weakness_list {
                let weakness = Weakness::new(id, &weakn);
                weaknesses.push(weakness);
                id += 1;
            }
        }
        weaknesses
    }

    pub fn to_table(&self) -> Vec<String> {
        vec![
            self.id.to_string(),
            self.category.clone(),
            self.name.clone(),
            self.description.clone(),
            self.cve.clone(),
            self.severity.clone(),
            self.location.file.clone(),
            self.location.start_line.to_string(),
            self.location.end_line.to_string(),
        ]
    }
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Location {
    pub file: String,
    pub start_line: u64,
    pub end_line: u64,
}

impl Location {
    pub fn new(vulnerability_json: &Value) -> Location {
        let location_json = &vulnerability_json["tracking"]["items"];
        let location_item = &location_json[0];
        Location {
            file: location_item["file"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            start_line: location_item["line_start"].as_u64().unwrap_or(0),
            end_line: location_item["line_end"].as_u64().unwrap_or(0),
        }
    }
}

#[derive(Serialize, Deserialize, Debug)]
pub struct Weakness {
    pub id: u32,
    pub r#type: String,
    pub name: String,
    pub value: String,
    pub url: String,
}

impl Weakness {
    fn new(id: u32, weakness_json: &Value) -> Weakness {
        Weakness {
            id,
            r#type: weakness_json["type"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            name: weakness_json["name"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            value: weakness_json["weakn"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
            url: weakness_json["url"]
                .as_str()
                .unwrap_or_default()
                .to_string(),
        }
    }
}
